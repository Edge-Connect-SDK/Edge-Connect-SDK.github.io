[{"id":0,"href":"/docs/implementation/android/","title":"Android","section":"Implementation","content":" Requirements \u0026amp; Restrictions # Android 8 (API level 26) or later Dependencies # Add the following dependencies to your app\u0026rsquo;s build.gradle file:\nimplementation \u0026#39;tech.edge:pcsdk:1.0.9\u0026#39; If you want to provide custom colors or fonts, you will need to add the following dependencies to your app\u0026rsquo;s build.gradle file:\nimplementation \u0026#39;androidx.compose.ui:ui\u0026#39; implementation \u0026#39;androidx.compose.ui:ui-graphics\u0026#39; In addition, you will need to add the following maven repository to your settings.gradle file:\ndependencyResolutionManagement { repositories { // ... maven { url \u0026#39;https://maven.pkg.github.com/Edge-Connect-SDK/edge-sdk-android\u0026#39; credentials { username\u0026lt;github_username\u0026gt; password\u0026lt;github_token\u0026gt; } } } } Where \u0026lt;github_username\u0026gt; is your GitHub username and \u0026lt;github_token\u0026gt; is a personal access token with the read:packages scope. For more information on how to create a personal access token, see Creating a personal access token.\nUsage # Before you can use the SDK, you must initialize it in your Application#onCreate() method.\n// Define an implementation of the Analytics interface if you want to track events val analytics = object : Analytics { override fun trackEvent(event: String, properties: Map\u0026lt;String, Any\u0026gt;) { // Implement } override fun trackPage(page: String, properties: Map\u0026lt;String, Any\u0026gt;) { // Implement } } // Define an implementation of the ErrorLogger interface if you want to log errors val errorLogger = object : ErrorLogger { override fun logError(message: String, error: Throwable?) { // Implement } } // Define custom colors if you want to override the default color scheme val customColorScheme = Colors( icon = Color(0xFFFFFFFF), control = Color(0xFF464646), buttonBorder = Color(0xFF5C8DA5), buttonBackground = Color(0xFF000000), surface = Color(0xFF242424), surface200 = Color(0xFF3F3F3F), surface300 = Color(0xFF585858), success = Color(0xFF348025), success200 = Color(0xFF42AC2C), error = Color(0xFF410003), lights = Color(0xFF2C2600), lights200 = Color(0xFF7C6400), temperature = Color(0xFF474444), temperatureGradient1 = Color(0xFF00293D), temperatureGradient2 = Color(0xFF000000), temperatureGradient3 = Color(0xFF3A0800), temperatureGradientEco1 = Color(0xFF062700), temperatureGradientEco2 = Color(0xFF136B00), temperatureGradientEco3 = Color(0xFF052000), blinds = Color(0xFF002138), ) val textColor = Color(0xFFFFFFFF) // Define custom typography if you want to override the default typography val customTypography = Fonts( title1 = TextStyle(fontSize = 20.sp, color = textColor), title2 = TextStyle(fontSize = 20.sp, color = textColor), controlTitle = TextStyle(fontSize = 16.sp, color = textColor), body = TextStyle(fontSize = 14.sp, color = textColor), button = TextStyle(fontSize = 12.sp, color = textColor), statusValue = TextStyle(fontSize = 12.sp, color = textColor), label = TextStyle(fontSize = 12.sp, color = textColor), squareButton1 = TextStyle(fontSize = 12.sp, color = textColor), squareButton2 = TextStyle(fontSize = 12.sp, color = textColor), ) EdgeSdk.initialize( environment = Environment.DEVELOPMENT, analytics = analytics, // Optional errorLogger = errorLogger, // Optional colors = customColorScheme, // Optional typography = customTypography, // Optional ) Once the SDK is initialized, you can start an activity to display the EDGE Connect UI. Only one EDGE Connect activity can be started at a time. If you want to start a new activity, you must first close the existing activity.\nEdgeSdk.startActivity( context = context, startDestinationRoute = EdgeSdk.DASHBOARD_ROUTE, flags = Intent.FLAG_ACTIVITY_CLEAR_TASK or Intent.FLAG_ACTIVITY_NEW_TASK // Optional ) startDestinationRoute is the route that will be displayed when the activity is started. The following routes are available:\nEdgeSdk.DASHBOARD_ROUTE EdgeSdk.BUILDING_ROUTE Sample app # This repository contains a sample app that demonstrates how to use the SDK. To build the sample app, you need to add maven credentials to your local.properties file:\n# Edge SDK Maver repository credentials maven_username=\u0026lt;your_github_username\u0026gt; maven_password=\u0026lt;your_github_token\u0026gt; You can generate the token by following the instructions here.\n"},{"id":1,"href":"/docs/","title":"Docs","section":"Edge SDK","content":""},{"id":2,"href":"/docs/implementation/","title":"Implementation","section":"Docs","content":" Implementation # Here you can find info for the iOS and Android implementations\nAndroid iOS "},{"id":3,"href":"/docs/implementation/ios/","title":"iOS","section":"Implementation","content":" iOS # The Edge library is offered as a dynamic framework. The easiest way to install it is through Cocoapods.\nRequirements \u0026amp; Restrictions # Your deployment target has to be set to iOS 15 or higher.\nInstallation # Cocoapods # The EdgeSDK has two dependencies to other private frameworks (Innolib and SignifyIndoorPositioning). To get access to the EdgeSDK and its dependencies, you need to have access to the Github organization \u0026lsquo;Edge-Connect-SDK\u0026rsquo;, and more specifically to the iOS repository in there: https://github.com/Edge-Connect-SDK/edge-sdk-ios .\nTo install the EdgeSDK, first add this repository as a source to your Podfile. Also specify the main cocoapods spec repository since this is a requirement from Cocoapods when you add custom sources.\nsource \u0026#39;git@github.com:Edge-Connect-SDK/edge-sdk-ios.git\u0026#39; source \u0026#39;https://github.com/CocoaPods/Specs\u0026#39; Please contact your main contact at Edge to get access to this repository.\nThen in your Podfile, add the dependency to the EdgeSDK:\npod \u0026#39;EdgeSDK\u0026#39; pod \u0026#39;EdgeSDK-debug\u0026#39;, :configurations =\u0026gt; [\u0026#39;Debug\u0026#39;] pod \u0026#39;EdgeSDK-release\u0026#39;, :configurations =\u0026gt; [\u0026#39;Release\u0026#39;] Setup # After adding the framework to you project, youâ€™ll have to add a configuration file to your project with some settings to configure the project. This file should be named AppConfig.plist . You can override the files per target by adding a file named TargetConfig.plist. The values that can be defined in here are:\nName Type Required Default value Explanation WebAPIBAU String true - The server is protected with basic auth. This property contains the username as a base64 encoded string. WebAPIBAP String true - The server is protected with basic auth. This property contains the password as a base64 encoded string. Environment String true - Should be one of these values: development, alpha, acceptance or production. Used to determine which environment the app connects to. IndoorPositioningKey String true - The license key obtained from Signify Then, make sure the following usage descriptions are filled in in your Info.plist (or InfoPlist.strings) file:\nNSBluetoothAlwaysUsageDescription (Privacy - Bluetooth Always Usage Description) NSCameraUsageDescription (Privacy - Camera Usage Description) NSLocationWhenInUseUsageDescription (Privacy - Location When In Use Usage Description) To start the library, the create an LibraryAppCoordinator object and pass it the main window of your app, on which the library can show view controllers. Calling the start() function will return the initial view controller which the host app should display itself. Please note you can pass a UINavigationController to the start() function. If none is passed, then the libraray will create one. Make sure to retain the LibraryAppCoordinator. It\u0026rsquo;s possible to specify the technique used for indoor positioning: either bGrid or Signify. This line is optional and defaults to Signify A typical setup in the AppDelegate would look like this:\nwindow = UIWindow(frame: UIScreen.main.bounds) coordinator = EdgeLibraryAppCoordinator(window: window!, delegate: self) coordinator.indoorPositioningSource = .bGrid // This line is optional coordinator.start(navigationController) You need to implement two delegate functions: one to close the edge library and one to handle permission errors:\nfunc edgeLibrarayDidClose(_ libraryAppCoordinator: EdgeLibraryAppCoordinator) { navigationController.popViewController(animated: true) } func edgeLibraryDidFailWithMissingPermissions(_ libraryAppCoordinator: EdgeLibraryAppCoordinator) { navigationController.popViewController(animated: true) // Show error } DebugMode # When the DebugMode property is set to true in the config file, you can use a debug location instead of your current location. You can set this on the library like this:\ncoordinator.startDebugCoordinator(coordinates: LocationCoordinates(latitude: 13.047145, longitude: 77.650126) Overwrites # Fonts # Fonts can be overridden by adding the FontFileNames array and FontNames dictionary in your AppConfig (or TargetConfig) files. The FontFileNames is just a list of custom fonts you want to use in your app. The FontNames entry is a dictionary containing two more dictionaries: Base and Extra. Each of those contain another dictionary that maps a certain font (Base.Regular) to a certain font name. See the Styleguide to understand how the different fonts are used. An example config file that illustrates font overrides:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \u0026#34;-//Apple//DTD PLIST 1.0//EN\u0026#34; \u0026#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026#34;\u0026gt; \u0026lt;plist version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;FontFileNames\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt; \u0026lt;string\u0026gt;Edge-Bold.otf\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;Edge-Book.otf\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;Edge-Medium.otf\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;P22MackinacPro-Bold-Italic.otf\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;P22MackinacPro-Bold.otf\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;P22MackinacPro-Medium.otf\u0026lt;/string\u0026gt; \u0026lt;/array\u0026gt; \u0026lt;key\u0026gt;FontNames\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Base\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Regular\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Edge-Book\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;Bold\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Edge-Bold\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;Black\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Edge-Medium\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;key\u0026gt;Extra\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Black\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;PMackinacProMedium\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;Bold\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;P22MackinacPro-Bold\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;BoldItalic\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;P22MackinacPro-BoldItalic\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt; Colors # Colors can be overriden by adding a color catalog to the project and overwriting one or more of the colors that are mentioned in the Styleguide.\nImages # Images can be overriden by adding an image catalog to the project and overwriting one or more of the images that are mentioned in the Styleguide.\nRelease notes # 0.39 # Official beta including all features\n1.0.0 # Add support for bGrid buildings. Optionally specify the preferred way for indoor positioning of the EdgeLibraryAppCoordinator by adding this optional line coordinator.indoorPositioningSource = .bGrid. If you omit this line, it defaults to using Signify. "},{"id":4,"href":"/docs/styleguide/","title":"Styleguide","section":"Docs","content":" Styleguide # Colors # The followings colors are used.\nAndroid iOS Color code (ARBG) Description blinds blinds 0xFFDFF1FE Used as the generic color for the blinds card on the room control page buttonBackground buttonBackground 0xFFFFFFFF Used as the background color for the buttons. If left empty, no background color is used buttonBorder border 0xFF262829 Used as the border color for the buttons control control 0xFFFFFFFF Used mainly as the background color for the room controls error error 0xFFF8E0E1 Used as the background color for the icon in the error messages icon icon 0xFF262829 Used as the tint color for all the icons in the app lights lights 0xFFF9F3CF Used as the generic color for the light card on the room control page lights200 lights200 0xFFF9D023 Used as the color for the light control of which the transparency is based on the brightness percentage. For example 25% brightness means 25% transparency success success 0xFF80D06F Used as the color for when the toggle is switched on for the eco and auto mode success200 success200 0xFF42AC2C Used as the color for eco line with icon in the lights control page surface surface 0xFFFFFFFF Used as the lightest background color for home screen and the rooms control screen surface200 surface200 0xFF2F871D Used as the accent background color for the splash screen and the control overlays surface300 surface300 0xFFBCB6A9 Used as a darker background color for some controls, such as the toggle and the blinds control temperature temperature 0xFFECE0DE Used as the generic color for the temperature card on the room control page temperatureGradient1 temperatureGradient1 0xFFA5D7EF Used as the most left part of the background gradient for the temperature control temperatureGradient2 temperatureGradient2 0xFFFFFFFF Used as the center part of the background gradient for the temperature control temperatureGradient3 temperatureGradient3 0xFFFF8C79 Used as the most right part of the background gradient for the temperature control temperatureGradientEco1 ecoGradient1 0xFFC5EABE Used as the most left part of the background gradient for the temperature control in eco mode temperatureGradientEco2 ecoGradient2 0xFF80D06F Used as the center part of the background gradient for the temperature control in eco mode temperatureGradientEco3 ecoGradient3 0xFFC5EABE Used as the most right part of the background gradient for the temperature control in eco mode. This is the same color as temperature -gradient 1 - eco textColor textColor Used as the color for all the texts Fonts # The following fonts are used.\nEdge # Font weight Description Book Body texts Buttons Links Medium Second line of the status labels in room control pages (label below brightness percentage, room status, position and angle) Bold First line in heading of homepage First part in other headings (room control pages) P22 Mackinac Pro # Font weight Description Medium First line of the labels in room control pages (like eco/auto label and the status label) Bold Second line in heading of homepage Title of room control cards Bold Italic Second line all headings except for the one on the homepage Images # The followings images are used.\nAndroid iOS Description ??? arrowLeft Used for the back arrow in the navigation bar ??? close Used for the close icon in the navigation bar ??? dragCircleIcon The icon used in the control sliders ??? eco Icon used to indicate the eco value for a control ??? errorBadge Exclamation icon used on the error pages ??? blinds Main icon for the blind control ??? lightbulb Main icon for the lights control ??? thermometer Main icon for the temperature control ??? settings Gear icon that\u0026rsquo;s used to open the settings page "}]